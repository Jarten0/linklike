{
	// Place your linklike workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"New NPC Stat": {
		"scope": "rust",
		"prefix": "stat",
		"body": [
			"#[derive(Debug, bevy_reflect::Reflect, serde::Serialize)]",
			"pub struct ${1:Stat}(${0:f32});",
			"",
			"impl crate::npc::Stat for ${1:Stat} {",
			"    fn name() -> &'static str",
			"    where",
			"        Self: Sized,",
			"    {",
			"        \"${1:Stat}\"",
			"    }",
			"",
			"    fn stat_name(&self) -> &'static str {",
			"        \"${1:Stat}\"",
			"    }",
			"",
			"    fn get(&self) -> &dyn bevy_reflect::Reflect {",
			"        &self.0",
			"    }",
			"",
			"    fn get_mut(&mut self) -> &mut dyn bevy_reflect::Reflect {",
			"        &mut self.0",
			"    }",
			"}"

		],
		"description": "Creates a new stat"
	}
}